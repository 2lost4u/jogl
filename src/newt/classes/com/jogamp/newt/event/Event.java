/*
 * Copyright (c) 2008 Sun Microsystems, Inc. All Rights Reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * - Redistribution of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * 
 * - Redistribution in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of Sun Microsystems, Inc. or the names of
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * This software is provided "AS IS," without a warranty of any kind. ALL
 * EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND WARRANTIES,
 * INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE OR NON-INFRINGEMENT, ARE HEREBY EXCLUDED. SUN
 * MICROSYSTEMS, INC. ("SUN") AND ITS LICENSORS SHALL NOT BE LIABLE FOR
 * ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR
 * DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES. IN NO EVENT WILL SUN OR
 * ITS LICENSORS BE LIABLE FOR ANY LOST REVENUE, PROFIT OR DATA, OR FOR
 * DIRECT, INDIRECT, SPECIAL, CONSEQUENTIAL, INCIDENTAL OR PUNITIVE
 * DAMAGES, HOWEVER CAUSED AND REGARDLESS OF THE THEORY OF LIABILITY,
 * ARISING OUT OF THE USE OF OR INABILITY TO USE THIS SOFTWARE, EVEN IF
 * SUN HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
 * 
 */

package com.jogamp.newt.event;

import com.jogamp.newt.*;
import java.util.*;

public class Event {
    private boolean isSystemEvent;
    private int eventType;
    private Object source;
    private long when;

    static final boolean DEBUG = false;

    //  0: Event.java
    //  1:   InputEvent.java
    //  2:       KeyEvent.java  
    //  3:          com.jogamp.newt.Window
    //  3:          com.jogamp.newt.awt.event.AWTNewtEventFactory
    //  2:       MouseEvent.java  
    //  3:          com.jogamp.newt.Window
    //  3:          com.jogamp.newt.awt.event.AWTNewtEventFactory
    //  1:   PaintEvent.java  
    //  2:       com.jogamp.newt.Window
    //  2:       com.jogamp.newt.awt.event.AWTNewtEventFactory
    //  1:   WindowEvent.java
    //  2:       com.jogamp.newt.Window
    //  2:       com.jogamp.newt.awt.event.AWTNewtEventFactory
    //
    static final String WindowClazzName = "com.jogamp.newt.Window" ;
    static final String AWTNewtEventFactoryClazzName = "com.jogamp.newt.awt.event.AWTNewtEventFactory" ;

    static final boolean evaluateIsSystemEvent(Event event, Throwable t) {
        StackTraceElement[] stack = t.getStackTrace();
        if(stack.length==0 || null==stack[0]) {
            return false;
        }
        if(DEBUG) {
            for (int i = 0; i < stack.length && i<5; i++) {
             System.out.println(i+": " + stack[i].getClassName()+ "." + stack[i].getMethodName());
            }
        }

        String clazzName = null;

        if( (event instanceof com.jogamp.newt.event.WindowEvent) ||
            (event instanceof com.jogamp.newt.event.PaintEvent) ) {
            if ( stack.length > 2 ) {
                clazzName = stack[2].getClassName();
            }
        } else if( (event instanceof com.jogamp.newt.event.MouseEvent) ||
                   (event instanceof com.jogamp.newt.event.KeyEvent) ) {
            if ( stack.length > 3 ) {
                clazzName = stack[3].getClassName();
            }
        }

        boolean res = null!=clazzName && (
                        clazzName.equals(WindowClazzName) || 
                        clazzName.equals(AWTNewtEventFactoryClazzName) ) ;
        if(DEBUG) {
            System.out.println("system: "+res);
        }
        return res;
    }

    protected Event(int eventType, Object source, long when) {
        this.isSystemEvent = evaluateIsSystemEvent(this, new Throwable());
        this.eventType = eventType;
        this.source = source;
        this.when = when;
    }

    /** Indicates whether this event was produced by the system or
        generated by user code. */
    public final boolean isSystemEvent() {
        return isSystemEvent;
    }

    /** Returns the event type of this event. */
    public final int getEventType() {
        return eventType;
    }

    /** Returns the source Object which produced this Event. */
    public final Object getSource() {
        return source;
    }

    /** Returns the timestamp, in milliseconds, of this event. */
    public final long getWhen()  {
        return when;
    }

    public String toString() {
        return "Event[sys:"+isSystemEvent()+", source:"+getSource()+", when:"+getWhen()+"]";
    }

    public static String toHexString(int hex) {
        return "0x" + Integer.toHexString(hex);
    }

    public static String toHexString(long hex) {
        return "0x" + Long.toHexString(hex);
    }

}
